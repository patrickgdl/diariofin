@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

@layer utilities {
  .step {
    counter-increment: step;
  }

  .step:before {
    @apply absolute w-9 h-9 bg-muted rounded-full font-mono font-medium text-center text-base inline-flex items-center justify-center -indent-px border-4 border-background;
    @apply ml-[-50px] mt-[-4px];
    content: counter(step);
  }
}

@media (max-width: 640px) {
  .container {
    @apply px-4;
  }
}

.react-colorful__saturation-pointer {
  width: 20px !important;
  height: 20px !important;
  border-radius: 0 !important;
}

.react-colorful__hue {
  height: 20px !important;
  margin-top: 0.5rem;
  border-radius: 0 !important;
}

.react-colorful__pointer .react-colorful__hue-pointer {
  width: 20px;
  height: 20px;
  border-radius: 0 !important;
}

.react-colorful__hue .react-colorful__hue-pointer {
  width: 20px;
  height: 20px;
  border-radius: 0 !important;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="number"] {
  -moz-appearance: textfield;
}

@keyframes shake {
  0% {
    transform: translateX(0rem);
  }
  25% {
    transform: translateX(0.5rem);
  }
  75% {
    transform: translateX(-0.5rem);
  }
  100% {
    transform: translateX(0rem);
  }
}

.counter h2 {
  transform-style: flat;
}

.counter {
  display: grid;
  place-items: center;
}

.counter fieldset .sr-only {
  position: absolute;
  font-size: var(--font-size);
  line-height: var(--line-height);
  z-index: 2;
  font-variant: tabular-nums;
  color: transparent;
}

.counter fieldset {
  --mask-size: 0.25;
  /* --font-size: clamp(20px, 4vw + 1rem, 8rem); */
  --font-size: 35px;
  --line-height: calc(var(--font-size) * 1.5);
  padding: 0;
  margin: 0;
  border: 0;
}

.counter legend {
  color: hsl(20 80% 50%);
  border: 0;
  font-size: calc(var(--font-size) * 0.25);
}

.character {
  display: grid;
  height: 1lh;
  line-height: var(--line-height);
  font-variant: tabular-nums;
  font-size: var(--font-size);
  overflow: hidden;
  mask: linear-gradient(
    transparent,
    hsl(var(--background)) calc(1lh * var(--mask-size)) calc(100% - (1lh * var(--mask-size))),
    transparent
  );
  transform-style: flat;
}

.character__track span {
  height: 1lh;
  transform-style: flat;
}

.character,
.character__track span {
  /* background: linear-gradient(hsl(0 0% 98%) 50%, hsl(0 0% 45%)); */
  background-color: hsl(var(--foreground));
  background-attachment: fixed;
  background-clip: text;
  color: transparent;
  transform-style: flat;
}

.character__track {
  display: grid;
  translate: 0 calc((var(--v) + 1) * (var(--line-height) * -1));
  transition: translate calc(var(--transition) * 1s) var(--ease);
}

/* .character:first-of-type {
	margin-right: 0.2ch;
	opacity: 0.75;
	font-size: calc(var(--font-size) * 0.8);
} */

.character:first-of-type {
  /* margin-right: 0.2ch; */
  /* opacity: 0.75; */
  /* font-size: calc(var(--font-size) * 0.8); */
}

.characters {
  display: flex;
  gap: 2px;
  transform-style: flat;
}

.fraction {
  font-size: calc(var(--font-size) * 0.75);
  opacity: 0.75;
  height: var(--line-height);
}

.fraction .character__track span {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  padding: calc((var(--line-height) - var(--font-size)) * 0.2) 0;
}

.counter:last-of-type {
  position: absolute;
  opacity: 0;
  pointer-events: none;
}

.counter:last-of-type [data-value] {
  position: relative;
}

.counter:last-of-type [data-value]::after {
  content: attr(data-value);
  position: absolute;
  bottom: 0%;
  left: 0%;
  background: linear-gradient(hsl(0 0% 98%) 50%, hsl(0 0% 45%));
  background-attachment: fixed;
  background-clip: text;
  color: transparent;
}

.counter:last-of-type .fraction[data-value]::after {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  padding: calc((var(--line-height) - var(--font-size)) * 0.2) 0;
  height: var(--line-height);
}

.dg.ac {
  z-index: 9999 !important;
  transform: translate3d(0, 0, 100vmin);
}

.counter:first-of-type {
  transform: translate3d(0, 0, calc(var(--depth) * 1));
}

.counter:last-of-type {
  transform: translate3d(0, 0, calc(var(--depth) * -1));
}

.counter {
  transition: transform 0.5s 2s;
}

.counter:last-of-type {
  transition: transform 0.5s 2s ease, opacity 0.5s 2s steps(1, end), background 0.5s 1s, border-color 0.5s 1s;
}

.counter:last-of-type .character {
  mask: unset;
  overflow: visible;
}

.counter:last-of-type .character__track span {
  opacity: 0;
}

.counter:last-of-type .character--symbol,
.counter:last-of-type .character__track span {
  transition: opacity 0.5s;
}

.counter:last-of-type [data-value]::after {
  transition: opacity 0.5s;
}

.counter:last-of-type legend {
  transition: color 0.5s 1s;
}
